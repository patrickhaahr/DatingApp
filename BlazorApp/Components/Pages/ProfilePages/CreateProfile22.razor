@page "/profiles/create2"
@using BlazorApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Profile" OnValidSubmit="AddProfile" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="mb-3">
                    <label for="accountid" class="form-label">AccountId:</label>
                    <InputNumber id="accountid" @bind-Value="Profile.AccountId" />
                </div>
                <div class="mb-3">
                    <label for="height" class="form-label">Height:</label>
                    <InputNumber id="height" @bind-Value="Profile.Height" class="form-control" />
                    <ValidationMessage For="() => Profile.Height" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputNumber id="weight" @bind-Value="Profile.Weight" class="form-control" />
                    <ValidationMessage For="() => Profile.Weight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="Profile.BirthDate" class="form-control" disabled="true"/>
                    <ValidationMessage For="() => Profile.BirthDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="pic" class="form-label">Pic:</label>
                    <InputText id="pic" @bind-Value="Profile.Pic" class="form-control" />
                    <ValidationMessage For="() => Profile.Pic" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nickname" class="form-label">NickName:</label>
                    <InputText id="nickname" @bind-Value="Profile.NickName" class="form-control" />
                    <ValidationMessage For="() => Profile.NickName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="gender" class="form-label">Gender:</label>
                    <InputCheckbox id="genderMan" @bind-Value="Profile.Gender" class="form-check-input" /> Man
                    <InputCheckbox id="genderWoman" @bind-Value="Profile.Gender" class="form-check-input" /> Woman
                    <ValidationMessage For="() => Profile.Gender" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private Profile Profile = new Profile();
    private Account Account = new Account();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name;
            var httpClient = HttpClientFactory.CreateClient("api");
            Account = await HttpClient.GetFromJsonAsync<Account>($"api/account/{email}");

            if (Account != null)
            {
                Profile.AccountId = Account.AccountId;
                Profile.BirthDate = Account.BirthDate;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }

        isLoading = false;
    }


    public async Task AddProfile()
    {
        var httpClient = HttpClientFactory.CreateClient("api");
        await HttpClient.PostAsJsonAsync("api/profile", Profile);
        NavigationManager.NavigateTo("/");
    }
}
