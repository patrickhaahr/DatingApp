@page "/accounts/delete"
@inject BlazorApp.Data.DatingAppDbContext DB
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Account</h4>
    <hr />
    @if (account is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DisplayName</dt>
            <dd class="col-sm-10">@account.DisplayName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BirthDate</dt>
            <dd class="col-sm-10">@account.BirthDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserName</dt>
            <dd class="col-sm-10">@account.UserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@account.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@account.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreateDate</dt>
            <dd class="col-sm-10">@account.CreateDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@account.Role</dd>
        </dl>
        <EditForm method="post" Model="account" OnValidSubmit="DeleteAccount" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(account is null)">Delete</button> |
            <a href="/accounts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Account? account;

    [SupplyParameterFromQuery]
    public int AccountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        account = await DB.Accounts.FirstOrDefaultAsync(m => m.AccountId == AccountId);

        if (account is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteAccount()
    {
        DB.Accounts.Remove(account!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/accounts");
    }
}
