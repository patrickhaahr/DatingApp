@page "/likes/create"
@inject BlazorApp.Data.DatingAppDbContext DB
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Like</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Like" OnValidSubmit="AddLike" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="senderid" class="form-label">SenderId:</label> 
                <InputNumber id="senderid" @bind-Value="Like.SenderId" class="form-control" /> 
                <ValidationMessage For="() => Like.SenderId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="receiverid" class="form-label">ReceiverId:</label> 
                <InputNumber id="receiverid" @bind-Value="Like.ReceiverId" class="form-control" /> 
                <ValidationMessage For="() => Like.ReceiverId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputNumber id="status" @bind-Value="Like.Status" class="form-control" /> 
                <ValidationMessage For="() => Like.Status" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/likes">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Like Like { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddLike()
    {
        DB.Likes.Add(Like);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/likes");
    }
}
