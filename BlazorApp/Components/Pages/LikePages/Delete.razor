@page "/likes/delete"
@inject BlazorApp.Data.DatingAppDbContext DB
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Like</h4>
    <hr />
    @if (like is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">SenderId</dt>
            <dd class="col-sm-10">@like.SenderId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReceiverId</dt>
            <dd class="col-sm-10">@like.ReceiverId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@like.Status</dd>
        </dl>
        <EditForm method="post" Model="like" OnValidSubmit="DeleteLike" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(like is null)">Delete</button> |
            <a href="/likes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Like? like;

    [SupplyParameterFromQuery]
    public int LikeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        like = await DB.Likes.FirstOrDefaultAsync(m => m.LikeId == LikeId);

        if (like is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteLike()
    {
        DB.Likes.Remove(like!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/likes");
    }
}
