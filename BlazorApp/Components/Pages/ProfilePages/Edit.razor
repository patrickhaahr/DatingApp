@page "/Profiles/edit"
@inject BlazorApp.Data.DatingAppDbContext DB
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Profile</h4>
<hr />
@if (Profile is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Profile" OnValidSubmit="UpdateProfile" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Profile.ProfileId" value="@Profile.ProfileId" />
                <div class="mb-3">
                    <label for="accountid" class="form-label">AccountId:</label>
                    <InputNumber id="accountid" @bind-Value="Profile.AccountId" class="form-control" />
                    <ValidationMessage For="() => Profile.AccountId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="height" class="form-label">Height:</label>
                    <InputNumber id="height" @bind-Value="Profile.Height" class="form-control" />
                    <ValidationMessage For="() => Profile.Height" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputNumber id="weight" @bind-Value="Profile.Weight" class="form-control" />
                    <ValidationMessage For="() => Profile.Weight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="Profile.BirthDate" class="form-control" />
                    <ValidationMessage For="() => Profile.BirthDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="pic" class="form-label">Pic:</label>
                    <InputText id="pic" @bind-Value="Profile.Pic" class="form-control" />
                    <ValidationMessage For="() => Profile.Pic" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nickname" class="form-label">NickName:</label>
                    <InputText id="nickname" @bind-Value="Profile.NickName" class="form-control" />
                    <ValidationMessage For="() => Profile.NickName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="gender" class="form-label">Gender:</label>
                    <InputText id="gender" @bind-Value="Profile.Gender" class="form-control" />
                    <ValidationMessage For="() => Profile.Gender" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/profiles">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ProfileId { get; set; }

    [SupplyParameterFromForm]
    public Profile? Profile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Profile ??= await DB.Profiles.FirstOrDefaultAsync(m => m.ProfileId == ProfileId);

        if (Profile is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProfile()
    {
        DB.Attach(Profile!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProfileExists(Profile!.ProfileId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/profiles");
    }

    bool ProfileExists(int profileid)
    {
        return DB.Profiles.Any(e => e.ProfileId == profileid);
    }
}
