@page "/Accounts/edit"
@inject BlazorApp.Data.DatingAppDbContext DB
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Account</h4>
<hr />
@if (Account is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Account" OnValidSubmit="UpdateAccount" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Account.AccountId" value="@Account.AccountId" />
                <input type="hidden" name="Account.CreateDate" value="@Account.CreateDate" />
                <input type="hidden" name="Account.Role" value="@Account.Role" />
                <div class="mb-3">
                    <div class="mb-3">
                        <label for="displayname" class="form-label">DisplayName:</label>
                        <InputText id="displayname" @bind-Value="Account.DisplayName" class="form-control" />
                        <ValidationMessage For="() => Account.DisplayName" class="text-danger" />
                    </div>
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="Account.BirthDate" class="form-control" />
                    <ValidationMessage For="() => Account.BirthDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">UserName:</label>
                    <InputText id="username" @bind-Value="Account.UserName" class="form-control" />
                    <ValidationMessage For="() => Account.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Account.Email" class="form-control" />
                    <ValidationMessage For="() => Account.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="Account.Password" class="form-control" />
                    <ValidationMessage For="() => Account.Password" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
            <EditForm method="post" Model="Account" OnValidSubmit="DeleteAccount" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger" disabled="@(Account is null)">Delete</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/accounts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int AccountId { get; set; }

    [SupplyParameterFromForm]
    public Account? Account { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Account ??= await DB.Accounts.FirstOrDefaultAsync(m => m.AccountId == AccountId);

        if (Account is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateAccount()
    {
        DB.Attach(Account!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AccountExists(Account!.AccountId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/accounts");
    }

    public async Task DeleteAccount()
    {
        var profile = await DB.Profiles.FirstOrDefaultAsync(p => p.AccountId == Account.AccountId);
        if (profile != null)
        {
            // Delete related Likes where the profile is the receiver
            var likesAsReceiver = await DB.Likes.Where(l => l.ReceiverId == profile.ProfileId).ToListAsync();
            DB.Likes.RemoveRange(likesAsReceiver);

            // Delete related Likes where the profile is the sender
            var likesAsSender = await DB.Likes.Where(l => l.SenderId == profile.ProfileId).ToListAsync();
            DB.Likes.RemoveRange(likesAsSender);

            // Delete related Messages where the profile is the receiver
            var messagesAsReceiver = await DB.Messages.Where(m => m.ReceiverId == profile.ProfileId).ToListAsync();
            DB.Messages.RemoveRange(messagesAsReceiver);

            // Delete related Messages where the profile is the sender
            var messagesAsSender = await DB.Messages.Where(m => m.SenderId == profile.ProfileId).ToListAsync();
            DB.Messages.RemoveRange(messagesAsSender);

            DB.Profiles.Remove(profile);
        }

        DB.Accounts.Remove(Account!);
        await DB.SaveChangesAsync();

        NavigationManager.NavigateTo("/");
    }

    bool AccountExists(int accountid)
    {
        return DB.Accounts.Any(e => e.AccountId == accountid);
    }
}
