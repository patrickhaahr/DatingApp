@page "/Accounts/Login"

@* <div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body flex-column">
                <div class="text-center">
                    <img src="/images/access-denied.png" style="max-height: 5rem" />
                </div>
                <div class="text-center mt-2">
                    <span class="text-danger fw-bolder">You don't have permission to access this page.</span>
                </div>
            </div>
        </div>
    </div>
</div> *@

@using BlazorApp.Data
@using BlazorApp.Models
@using BlazorApp.Models.ViewModels
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject NavigationManager Navigation
@inject HttpClient Http
@inject DatingAppDbContext appDbContext

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/guyicon.png" style="max-height:5rem;" />
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="@(() => Model.UserName)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();


    private async Task Authenticate()
    {
        var account = appDbContext.Accounts.FirstOrDefault(a => a.UserName == Model.UserName && a.Password == Model.Password);
        if (account is null || account.Password != Model.Password)
        {
            errorMessage = "Invalid username or password";
            return;
        }

        var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, account.UserName),
                new Claim(ClaimTypes.Role, account.Role)
            };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        if (HttpContext != null)
        {
            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
            Navigation.NavigateTo("/Accounts/Login");
        }
        else
        {
            errorMessage = "Authentication failed due to an internal error.";
        }
    }
}