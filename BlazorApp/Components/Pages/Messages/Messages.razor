@page "/message1"
@using BlazorApp.Models
@using BlazorApp.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AccountService AccountService
@inject MessageService MessageService
@inject ProfileService ProfileService
@rendermode InteractiveServer

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="flex h-screen">
            <div class="w-1/4 bg-white dark:bg-zinc-800 border-r border-zinc-200 dark:border-zinc-700 p-4">
                <div class="flex items-center mb-4">
                    @if (currentUserProfile != null && !string.IsNullOrEmpty(currentUserProfile.Pic))
                    {
                        <img src="@($"data:image/png;base64,{currentUserProfile.Pic}")" alt="Profile" class="rounded-full mr-2" style="width: 40px; height: 40px;">
                    }
                    else
                    {
                        <img src="https://placehold.co/40x40" alt="Profile" class="rounded-full mr-2">
                    }
                    <span class="font-semibold dark:text-white">My Profile</span>
                </div>

                <div class="flex justify-between mb-4">
                    <span class="font-semibold dark:text-white">Matches</span>
                    <span class="text-red-500">@matches?.Count</span>
                </div>
                <div class="flex justify-between mb-4">
                    <span class="font-semibold dark:text-white">Messages</span>
                    <span class="text-red-500">@messages?.Count</span>
                </div>
                <div class="overflow-y-auto">
                    @if (matches != null)
                    {
                        @foreach (var match in matches)
                        {
                            <div class="flex items-center p-2 hover:bg-zinc-100 dark:hover:bg-zinc-700 cursor-pointer" @onclick="() => SelectMatch(match.ProfileId)">
                                <img src="@($"data:image/png;base64,{match.Pic}")" alt="match.NickName's photo" class="rounded-full mr-2" style="width: 40px; height: 40px;">
                                <div>
                                    <div class="font-semibold dark:text-white">@match.NickName</div>
                                    <div class="text-sm text-zinc-500 dark:text-zinc-400">@match.GenderDisplay</div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="w-1/2 bg-white dark:bg-zinc-800 border-r border-zinc-200 dark:border-zinc-700 p-4 flex flex-col">
                @if (selectedMatch != null)
                {
                    <div class="flex items-center mb-4">
                        <img src="@($"data:image/png;base64,{selectedMatch.Pic}")" alt="@selectedMatch.NickName's photo" class="rounded-full mr-2" style="width: 40px; height: 40px;">
                        <span class="font-semibold dark:text-white">You matched with @selectedMatch.NickName on @selectedMatch.BirthDate.ToShortDateString()</span>
                    </div>
                }
                <div class="flex-1 overflow-y-auto">
                    @foreach (var message in messages)
                    {
                        <div class="mb-4">
                            <div class="bg-zinc-100 dark:bg-zinc-700 p-2 rounded-lg inline-block">
                                <strong>@message.Sender.UserName:</strong> @message.MessageText
                            </div>
                        </div>
                    }
                </div>
                <div class="flex items-center p-2 border-t border-zinc-200 dark:border-zinc-700">
                    <InputText @bind-Value="newMessage.MessageText" placeholder="Type a message" class="flex-1 border border-zinc-300 dark:border-zinc-600 rounded-lg p-2 mr-2 dark:bg-zinc-800 dark:text-white" />
                    <button class="bg-zinc-200 dark:bg-zinc-700 text-zinc-500 dark:text-zinc-400 px-4 py-2 rounded-lg" @onclick="SendMessage">SEND</button>
                </div>
            </div>
            @if (selectedMatch != null)
            {
                <div class="w-1/4 bg-white dark:bg-zinc-800 p-4">
                    <img src="@($"data:image/png;base64,{selectedMatch.Pic}")" alt="@selectedMatch.NickName's photo" class="rounded-lg mb-4" style="width: 200px; height: 200px;">
                    <div class="font-semibold text-xl mb-2 dark:text-white">@selectedMatch.NickName @selectedMatch.Age</div>
                    <div class="text-zinc-500 dark:text-zinc-400 mb-4">@selectedMatch.Height</div>
                    <div class="text-zinc-500 dark:text-zinc-400 mb-4">@selectedMatch.Weight</div>
                    <div class="flex justify-between">
                        <button class="bg-zinc-200 dark:bg-zinc-700 text-zinc-500 dark:text-zinc-400 px-4 py-2 rounded-lg">UNMATCH</button>
                        <button class="bg-zinc-200 dark:bg-zinc-700 text-zinc-500 dark:text-zinc-400 px-4 py-2 rounded-lg">REPORT</button>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center py-16 bg-cover bg-center text-white" style="background-image: url('/images/background.png');">
            <h1 class="text-5xl font-bold mb-4">Dating App</h1>
            <a href="accounts/create" class="bg-red-500 text-white px-8 py-4 text-lg rounded-full inline-block">Create account</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Message> messages = new List<Message>();
    private List<Profile> matches = new List<Profile>();
    private Message newMessage = new Message();
    private int currentUserId;
    private Profile selectedMatch;
    private Profile currentUserProfile;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var account = await AccountService.GetAccountByUserNameAsync(user.Identity.Name);
            if (account != null)
            {
                currentUserId = account.AccountId;
                await LoadMatches();
                currentUserProfile = await ProfileService.GetProfileByAccountIdAsync(currentUserId);
            }
        }
    }


    private async Task LoadMessages(int matchProfileId)
    {
        messages = await MessageService.GetMessagesAsync(currentUserId, matchProfileId);
    }

    private async Task LoadMatches()
    {
        matches = await MessageService.GetMatchesAsync(currentUserId);
    }

    private async Task SendMessage()
    {
        if (selectedMatch != null)
        {
            newMessage.SenderId = currentUserId;
            newMessage.ReceiverId = selectedMatch.ProfileId;
            newMessage.SentDate = DateTime.Now;

            await MessageService.SendMessageAsync(newMessage);
            newMessage.MessageText = string.Empty;
            await LoadMessages(selectedMatch.ProfileId);
        }
        else
        {
            Console.WriteLine("Invalid ReceiverId");
        }
    }

    private async Task SelectMatch(int profileId)
    {
        selectedMatch = await ProfileService.GetProfileByIdAsync(profileId);
        if (selectedMatch != null)
        {
            await LoadMessages(profileId);
        }
    }
}
