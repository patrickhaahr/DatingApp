@page "/createprofile"
@using BlazorApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorApp.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BlazorApp.Data.DatingAppDbContext DB
@using Microsoft.EntityFrameworkCore
@inject AccountService AccountService
@inject ProfileService ProfileService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer

<EditForm Model="@Profile" OnValidSubmit="@AddProfile" FormName="createProfileForm">
    <Antiforgery />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="Profile.NickName" placeholder="NickName" />
    <InputNumber @bind-Value="Profile.Height" placeholder="Height" />
    <InputNumber @bind-Value="Profile.Weight" placeholder="Weight" />
    <label for="profilePicture">Upload Profile Picture:</label>
    <InputFile OnChange="OnInputFileChange" />
    <img src="@profilePic" alt="Profile Picture" style="width:200px; height:200px;" />
    
    <InputRadioGroup @bind-Value="Profile.Gender"> 
    <InputRadio Value="true" /> Male
    <InputRadio Value="false"/> Female
    </InputRadioGroup>

    <label for="zipcode">Zip Code:</label>
    <select id="zipcode" @bind="Profile.ZipCode" class="form-control">
        <option value="">Select a city</option>
        @foreach (var city in cities)
        {
            <option value="@city.ZipCode">@city.CityName (@city.ZipCode)</option>
        }
    </select>


    <button type="submit">Create Profile</button>
</EditForm>


@code {

    [SupplyParameterFromForm]
    public Profile Profile { get; set; } = new();
    private string base64Image;
    private string profilePic;
    private List<City> cities = new List<City>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var buffer = memoryStream.ToArray();
            base64Image = Convert.ToBase64String(buffer);
            profilePic = $"data:image/png;base64,{base64Image}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProfilePic();
        await LoadCities();
    }

    private async Task LoadCities()
    {
        cities = await DB.Cities.ToListAsync();
    }

    private async Task LoadProfilePic()
    {
        var profile = await ProfileService.GetProfileAsync();
        if (profile != null && !string.IsNullOrEmpty(profile.Pic))
        {
            profilePic = $"data:image/png;base64,{profile.Pic}";
        }
    }

    private async Task AddProfile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var account = await AccountService.GetAccountByUserNameAsync(user.Identity.Name);
            if (account != null)
            {
                Profile.AccountId = account.AccountId;
                Profile.BirthDate = account.BirthDate;
                Profile.Pic = base64Image;  // Ensure Pic is set

                DB.Profiles.Add(Profile);
                await DB.SaveChangesAsync();

                Console.WriteLine("Profile saved successfully");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Account not found");
            }
        }
    }
}