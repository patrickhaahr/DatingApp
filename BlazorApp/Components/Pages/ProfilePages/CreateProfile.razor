@page "/createprofile"
@using BlazorApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorApp.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BlazorApp.Data.DatingAppDbContext DB
@using Microsoft.EntityFrameworkCore
@inject AccountService AccountService
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer

<EditForm Model="@Profile" OnValidSubmit="@AddProfile">
    <Antiforgery />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="Profile.NickName" placeholder="NickName" />
    <InputNumber @bind-Value="Profile.Height" placeholder="Height" />
    <InputNumber @bind-Value="Profile.Weight" placeholder="Weight" />
    <label for="profilePicture">Upload Profile Picture:</label>
    <InputFile OnChange="HandleSelected" class="filepond-profile-image-input" />
    <InputText @bind-Value="Profile.Gender" placeholder="Gender" />

    <button type="submit">Create Profile</button>
    <script src="js/app.js"></script>
</EditForm>

@code {
    public Profile Profile { get; set; } = new();

    private DotNetObjectReference<CreateProfile> objRef;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await js.InvokeVoidAsync("initializeFilePond", objRef);
    }


    [JSInvokable]
    public void SetProfileImageUrl(string url)
    {
        Profile.Pic = url;
        StateHasChanged();
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();
        Profile.Pic = Convert.ToBase64String(fileBytes);
    }

    private async Task AddProfile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var account = await AccountService.GetAccountByUserNameAsync(user.Identity.Name);
            if (account != null)
            {
                Profile.AccountId = account.AccountId;
                Profile.BirthDate = account.BirthDate;

                DB.Profiles.Add(Profile);
                await DB.SaveChangesAsync();

                Console.WriteLine("Profile saved successfully"); // Logging for debugging
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Account not found"); // Logging for debugging
            }
        }
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }
}